from typing import Dict

from construct import Struct, Padding, Int8ul, Timestamp, Int32ul, Int8ub, Enum, Int16ul

from payload import Payload


class StatusCommsPayload(Payload):
    @staticmethod
    def parse(data: bytes) -> Dict:
        parser = Struct(
            Padding(8),
            'SystemTime' / Timestamp(Int32ul, 1., 1970),
            'SystemOpStatus' / Enum(Int8ub,
                                    Simulator=0,
                                    Idle=1,
                                    Discharging=2,
                                    SoCEmpty=3,
                                    Charging=4,
                                    Full=5,
                                    Timeout=6,
                                    CriticalPending=7,
                                    CriticalOffline=8,
                                    MqttOffline=9,
                                    AuthSetup=10,
                                    ShuntTimeout=11,
                                    ),
            'SystemAuthMode' / Enum(Int8ub,
                                    Default=0,
                                    Technician=1,
                                    Factory=2,
                                    ),
            'SystemAuthToken' / Int16ul,
            'SystemAuthRejectTicks' / Int8ul,
            'WifiState' / Enum(Int8ub,
                               BroadcastStart=0,
                               BroadcastPrep=1,
                               BroadcastTxSetup=2,
                               BroadcastRunning=3,
                               UsbCmdStart=4,
                               UsbCmdRunning=5,
                               UsbCmdPassThru=6,
                               UsbProgStart=7,
                               UsbProgRunning=8,
                               UsbProgPassThru=9,
                               OfflineStart=10,
                               OfflineRunning=11,
                               OfflineStop=12,
                               LimitedStart=13,
                               LimitedPrep=14,
                               LimitedRunning=15,
                               JoinApStart=16,
                               JoinApRunning=17,
                               ),
            'WifiRxCmdTicks' / Int8ul,
            'WifiRxUnknownTicks' / Int8ul,
            'WifiRxErrorTicks' / Int8ul,
            'WifiTxCmdTicks' / Int8ul,
            'WifiRssi' / Int8ul,
            'CanbusOpStatus' / Int8ul,
            'CanbusRxStatusTicks' / Int8ul,
            'CanbusRxUnknownTicks' / Int8ul,
            'CanbusRxErrorTicks' / Int8ul,
            'CanbusRxCmdTicks' / Int8ul,
            'CanbusTxCmdTicks' / Int8ul,
            'ShuntPollerMode' / Enum(Int8ub,
                                     IdleStart=0,
                                     Idle=1,
                                     SyncStart=2,
                                     SyncRunning=3,
                                     Normal=4,
                                     ShuntMon2SetupStart=5,
                                     ShuntMon2SetupRunning=6,
                                     ShuntMon2Normal=7,
                                     ),
            'ShuntStatus' / Enum(Int8ub,
                                 Timeout=0,
                                 Discharging=1,
                                 Idle=2,
                                 Charging=4,
                                 ),
            'ShuntStatusVolt' / Int8ul,
            'ShuntRxCmdTicks' / Int8ul,
            'ShuntRxUnknownTicks' / Int8ul,
            'ShuntRxErrorTicks' / Int8ul,
            'ShuntTxCmdTicks' / Int8ul,
            'ShuntRxIdle' / Int8ul,
            'UsbOpStatus' / Int8ul,
            'UsbRxCmdTicks' / Int8ul,
            'UsbRxUnknownTicks' / Int8ul,
            'UsbRxErrorTicks' / Int8ul,
            'UsbTxCmdTicks' / Int8ul,
            'MqttOpStatus' / Int8ul,
            'MqttRxCmdTicks' / Int16ul,
            'MqttRxUnknownTicks' / Int8ul,
            'MqttRxErrorTicks' / Int8ul,
            'MqttTxCmdTicks' / Int16ul,
            'rs485OpStatus' / Int8ul,
            'rs485RxCmdTicks' / Int8ul,
            'rs485RxUnknownTicks' / Int8ul,
            'rs485RxErrorTicks' / Int8ul,
            'rs485TxCmdTicks' / Int8ul,
            'CmuPollerMode' / Enum(Int8ub,
                                   Idle=0,
                                   Normal=1,
                                   CollectionStart=2,
                                   CollectionRunning=3,
                                   SyncStart=4,
                                   SyncRunning=5,
                                   NetworkTestStart=6,
                                   NetworkTestRunning=9,
                                   BypassTestStart=7,
                                   BypassTestRunning=8,
                                   RebootAllStart=10,
                                   RebootingAllDevices=11,
                                   SimulatorStart=12,
                                   SimulatorRunning=13,
                                   ),
            'CmuRxCmdTicks' / Int8ul,
            'CmuRxUnknownTicks' / Int8ul,
            'CmuRxErrorTicks' / Int8ul,
            'CmuTxCmdTicks' / Int8ul,
            'CmuOpStatus' / Int8ul,
            'CmuTxAckCount' / Int8ul,
            'CmuTxOpStatusNodeId' / Int8ul,
            'CmuTxOpStatusUSN' / Int8ul,
            'CmuTxOpParamNodeId' / Int8ul,
            'GroupMinCellVolt' / Int16ul,
            'GroupMaxCellVolt' / Int16ul,
            'GroupMinCellTemp' / Int8ul,
            'GroupMaxCellTemp' / Int8ul,
            'CmuRxOpStatusNodeId' / Int8ul,
            'CmuRxOpStatusGroupAck' / Int8ul,
            'CmuRxOpStatusUSN' / Int8ul,
            'CmuRxOpParamNodeId' / Int8ul,
            'RepeatCellVoltCounter' / Int16ul,
            'HwSystemSetupVers' / Int8ul,
            'HwCellGroupSetupVers' / Int8ul,
            'HwShuntSetupVers' / Int8ul,
            'HwExpansionSetupVers' / Int8ul,
            'HwIntegrationSetupVers' / Int8ul,
            'ControlCriticalSetupVers' / Int8ul,
            'ControlChargeSetupVers' / Int8ul,
            'ControlDischargeSetupVers' / Int8ul,
            'ControlThermalSetupVers' / Int8ul,
            'ControlRemoteSetupVers' / Int8ul,
            'ControlSchedulerSetupVers' / Int8ul,
            'ControlSocLimitSetupVers' / Int8ul,
            'LifetimeSetupVers' / Int8ul,
            'GlobalSetupVers' / Int8ul,
            'DiffLogicTicks' / Int8ul,
            'DiffBypassTicks' / Int8ul,
            'DiffTempTicks' / Int8ul,
            'DiffVoltTicks' / Int8ul,
        )

        data_parsed = parser.parse(data)
        StatusCommsPayload.clean_data(data_parsed)

        return data_parsed

    @staticmethod
    def clean_data(data: Dict) -> None:
        data['GroupMinCellVolt'] = Payload.clean_voltage(data.get('GroupMinCellVolt'))
        data['GroupMaxCellVolt'] = Payload.clean_voltage(data.get('GroupMaxCellVolt'))
        data['GroupMinCellTemp'] = Payload.clean_temperature(data.get('GroupMinCellTemp'))
        data['GroupMaxCellTemp'] = Payload.clean_temperature(data.get('GroupMaxCellTemp'))
