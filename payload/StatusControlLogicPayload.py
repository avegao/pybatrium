from typing import Dict

from construct import Struct, Padding, Int8ul, Flag, Enum, Int16ul

from payload import Payload


class StatusControlLogicPayload(Payload):
    @staticmethod
    def parse(data: bytes) -> Dict:
        parser = Struct(
            Padding(8),
            'isCriticalBattOkState' / Flag,
            'isCriticalBattOkCalc' / Flag,
            'isCriticalTransition' / Flag,
            'hasCriticalCellOverdue' / Flag,
            'hasCriticalCellVoltLo' / Flag,
            'hasCriticalCellVoltHi' / Flag,
            'hasCriticalCellTempLo' / Flag,
            'hasCriticalCellTempHi' / Flag,
            'hasCriticalSupplyVoltLo' / Flag,
            'hasCriticalSupplyVoltHi' / Flag,
            'hasCriticalAmbientLo' / Flag,
            'hasCriticalAmbientHi' / Flag,
            'hasCriticalShuntVoltLo' / Flag,
            'hasCriticalShuntVoltHi' / Flag,
            'hasCriticalShuntVoltLoIdle' / Flag,
            'reserved' / Padding(1),
            'hasCriticalShuntPeakCharge' / Flag,
            'hasCriticalShuntPeakDischg' / Flag,
            'reserved2' / Padding(4),
            'hasCriticalRecovery' / Flag,
            'hasCriticalPrecharge' / Flag,
            Padding(3),
            'isHeatOnState' / Flag,
            'isHeatOnCalc' / Flag,
            'isHeatTransition' / Flag,
            'hasHeatAmbientLo' / Flag,
            'hasHeatCellTempLo' / Flag,
            'hasAmbientTriggeredHeat' / Flag,
            # 'hasCellTempTriggeredHeat' / Flag,
            # 'reserved3' / Padding(1),
            # Padding(1),
            # 'isCoolOnState' / Flag,
            # 'isCoolOnCalc' / Flag,
            # 'isCoolTransition' / Flag,
            # 'hasCoolAmbientHi ' / Flag,
            # 'hasCoolCellTempHi ' / Flag,
            # 'hasAmbientTriggeredHeat' / Flag,
            # 'hasCellTempTriggeredHeat' / Flag,
            # 'reserved4' / Padding(1),
            # 'isChargePowerRateState' / Enum(Int8ul,
            #                                 Off=0,
            #                                 LimitedPower=2,
            #                                 NormalPower=4,
            #                                 ),
            # 'isChargePowerRateCalc' / Enum(Int8ul,
            #                                 Off=0,
            #                                 LimitedPower=2,
            #                                 NormalPower=4,
            #                                 ),
            # 'isChargeOnState' / Flag,
            # 'isChargeLimPower' / Flag,
            # 'isChargeTransition' / Flag,
            # 'hasChargeCellVoltHi' / Flag,
            # 'hasChargeCellVoltPause' / Flag,
            # 'hasChargeCellVoltLimPower' / Flag,
            # 'hasChargeCellTempLo' / Flag,
            # 'hasChargeCellTempHi' / Flag,
            # 'hasChargeAmbientTempLo' / Flag,
            # 'hasChargeAmbientTempHi' / Flag,
            # 'hasChargeSupplyVoltHi' / Flag,
            # 'hasChargeSupplyVoltPause' / Flag,
            # 'hasChargeShuntVoltHi' / Flag,
            # 'hasChargeShuntVoltPause' / Flag,
            # 'hasChargeShuntVoltLimPower' / Flag,
            # 'hasFluidFlowActive' / Flag,
            # 'hasChargeShuntSocHi' / Flag,
            # 'hasChargeShuntSocPause' / Flag,
            # 'hasChargeAboveInitalBypass' / Flag,
            # 'hasChargeAboveFinalBypass' / Flag,
            # 'hasChargeInBypass' / Flag,
            # 'hasChargeBypassComplete' / Flag,
            # 'hasChargeBypassTempRelief' / Flag,
            # 'hasChargeBypassSessionLo' / Flag,
            # 'isChargePowerRateAlt' / Enum(Int8ul,
            #                                Off=0,
            #                                LimitedPower=2,
            #                                NormalPower=4,
            #                                ),
            # 'RebalanceBypassExtra' / Flag,
            # 'reserved5' / Padding(7),
            # Padding(1),
            # 'isDischgPowerRateState' / Enum(Int8ul,
            #                                Off=0,
            #                                LimitedPower=2,
            #                                NormalPower=4,
            #                                ),
            # 'isDischgPowerRateCalc' / Enum(Int8ul,
            #                                Off=0,
            #                                LimitedPower=2,
            #                                NormalPower=4,
            #                                ),
            # 'isDischgOnState' / Flag,
            # 'isDischgLimPower' / Flag,
            # 'isDischgTransition' / Flag,
            # 'hasDischgCellVoltLo' / Flag,
            # 'hasDischgCellVoltPause' / Flag,
            # 'hasDischgCellVoltLimPower' / Flag,
            # 'hasDischgCellTempLo' / Flag,
            # 'hasDischgCellTempHi' / Flag,
            # 'hasDischgAmbientLo' / Flag,
            # 'hasDischgAmbientHi' / Flag,
            # 'hasDischgSupplyVoltLo' / Flag,
            # 'hasDischgSupplyVoltPause' / Flag,
            # 'hasDischgShuntVoltLo' / Flag,
            # 'hasDischgShuntVoltPause' / Flag,
            # 'hasDischgShuntVoltLimPower' / Flag,
            # 'reserved6' / Padding(1),
            # 'hasDischgShuntSocLo' / Flag,
            # 'hasDischgShuntSocPause' / Flag,
            # 'reserved7' / Padding(6),
            # 'isDischgPowerRateAlt' / Enum(Int8ul,
            #                                Off=0,
            #                                LimitedPower=2,
            #                                NormalPower=4,
            #                                ),
            # 'isSocOnState1' / Flag,
            # 'hasSocLoTriggered1' / Flag,
            # 'hasSocHiTriggered1' / Flag,
            # 'isSocOnState2' / Flag,
            # 'hasSocLoTriggered2' / Flag,
            # 'hasSocHiTriggered2' / Flag,
            # 'reserved8' / Padding(2),
            # 'isSocOnState3' / Flag,
            # 'hasSocLoTriggered3' / Flag,
            # 'hasSocHiTriggered3' / Flag,
            # 'isSocOnState4' / Flag,
            # 'hasSocLoTriggered4' / Flag,
            # 'hasSocHiTriggered4' / Flag,
            # 'reserved9' / Padding(2),
            # 'ExpansionOutputFet5' / Flag,
            # 'ExpansionOutputFet6' / Flag,
            # 'ExpansionOutputFet7' / Flag,
            # 'ExpansionOutputFet8' / Flag,
            # 'ExpansionOutputRelay1' / Flag,
            # 'ExpansionOutputRelay2' / Flag,
            # 'ExpansionOutputRelay3' / Flag,
            # 'ExpansionOutputRelay4' / Flag,
            # 'ExpansionInput1' / Flag,
            # 'ExpansionInput2' / Flag,
            # 'ExpansionInput3' / Flag,
            # 'ExpansionInput4' / Flag,
            # 'ExpansionInput5' / Flag,
            # 'ExpansionInput6' / Flag,
            # 'ExpansionOutputPwm1' / Flag,
            # 'ExpansionOutputPwm2' / Flag,
            # Padding(2),
            # 'ExpansionInputAIN1' / Int16ul,
            # 'ExpansionInputAIN2' / Int16ul,
            # 'DiffLogicTicks' / Int8ul,
        )

        return parser.parse(data)
